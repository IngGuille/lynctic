@Library('cobis-cloud-devops@1.0.1') _
import groovy.json.JsonSlurper

def current_userid_and_group

AWS_SESSION_TOKEN=""
AWS_ACCESS_KEY_ID=""
AWS_SECRET_ACCESS_KEY=""

pipeline {
    agent {
        label 'slaves'
    }
    parameters {
        choice(name: 'REQUESTED_ACTION', choices: ['CreateOrUpdate'], description: 'Acción a realizar.')
        // choice(name: 'REQUESTED_ACTION', choices: ['CreateOrUpdate', 'Destroy'], description: 'Acción a realizar.')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '783047516325', description: 'AWS Account ID')                
        string(name: 'REGION_STG', defaultValue: 'us-east-1', description: 'Region to deploy in staging')
        string(name: 'EnvironmentId_STG', defaultValue: 'stg', description: 'EnvironmentId for staging')        
        string(name: 'EnvironmentIdNew', defaultValue: 'antes de ejecutar preguntar CAOS', description: 'XXXXXXXPor ahora solo para outputs (dev1, stg1, qa1) EnvironmentId for stagingXXXXXX')        
        string(name: 'S3_BUCKET_STG', defaultValue: 'stg-cobis-operations-serverless-base-783047516325', description: 'S3 save funtions and swagger')
        string(name: 'STACK_NAME', defaultValue: 'operations-base', description: 'stack name')
        choice(name: 'configobjectcontrol', choices: ['si', 'no'], description: "Configurar object lock Buckets operaciones")        
        // string(name: 'WEBHOOK_OperationsCosts_STG', defaultValue: 'https://cobiscorp.webhook.office.com/webhookb2/77f2aeb7-4b3e-472e-b596-2e7f7718424d@a5e6fcaa-5535-41e3-8d08-2b6676750a3f/IncomingWebhook/d928234b48f843d2b3421d4973efdca2/408042f4-b243-41c2-be45-492a2b358fa0', description: 'OperationsCosts Webhook URL in Staging Environment')
        // string(name: 'WEBHOOK_CostsServerless_STG', defaultValue: 'https://outlook.office.com/webhook/7cd698b3-4ad3-430c-bb68-7982188a2e14@a5e6fcaa-5535-41e3-8d08-2b6676750a3f/IncomingWebhook/0804b92975954b2d8c4d1fff99d34c9e/408042f4-b243-41c2-be45-492a2b358fa0', description: 'CostsServerless Webhook URL in Staging Environment')
        string(name: 'AdminRole_STG', defaultValue: 'arn:aws:iam::783047516325:role/ec2_dev_role', description: 'ARN of the Admin Role of the Staging account')        
        string(name: 'Aditional_Params_STG', defaultValue: 'Organization="Banco Santander del Peru" Package="Cobis Core Banking" Version="1.0.0" EnvironmentType="Development" TenantId="t1" Project="Core Serverless" ProcessingType="Operations"', description: 'Aditional parameters to override in staging (use same format as toml file)')
        choice(name: 'Deploy_SecutiryHubConfig', choices: ['si', 'no'], description: "XXXXXSOLO En Rappi seleccionar que NO")
        choice(name: 'Deploy_Detective', choices: ['si', 'no'], description: "Implementar Detective")
        choice(name: 'Deploy_Backups', choices: ['si', 'no'], description: "Implementar recursos de AWS Backup")        
        choice(name: 'Deploy_CostReport', choices: ['si', 'no'], description: "Implementar reporte costos")        
        choice(name: 'Deploy_LambdaConcurrencyConfig', choices: ['si', 'no'], description: "Implementar configuración de concurrencia de Lambdas")        
        string(name: 'LambdasConfigDefinition', defaultValue: 'lambdaName,production,1', description: 'Lista de lambdas, alias y concurrencia')
        // string(name: 'OperationsTopic', defaultValue: 'eeeeeeeeeeenv-operations-topic', description: 'Nombre del tópico de operaciones')
        string(name: 'LambdaProvisionCron', defaultValue: '"0 10 ? * MON,TUE,WED,THU,FRI,SAT *"', description: 'Expresión CRON para provisión de concurrencia de Lambdas')
        string(name: 'LambdaVerificaCron', defaultValue: '"30 10 ? * MON,TUE,WED,THU,FRI,SAT *"', description: 'Expresión CRON para verificación de concurrencia de Lambdas')
        string(name: 'LambdaEliminaCron', defaultValue: '"0 3 ? * TUE,WED,THU,FRI,SAT,SUN *"', description: 'Expresión CRON para eliminación de concurrencia de Lambdas')        
        string(name: 'OrganizationAbbreviatedoo', defaultValue: 'antiguooutput', description: 'Organization abbreviated OLD OUTPUT')                
        string(name: 'Organizationoo', defaultValue: 'antiguooutput', description: 'Organization OLD OUTPUT')                
        choice(name: 'Deploy_Exportsnapshotrdstos3', choices: ['si', 'no'], description: "Implementar export snapshot rds a s3, Segunda ejecución pipeline")
        string(name: 'scheduleexportsnapshotrdstos3', defaultValue: '"0 15 L * ? *"', description: 'Programacion export snapshot RDS to S3')
        string(name: 'RDSClusterId', defaultValue: 'ClusterIDRDS', description: 'ClusterID de RDS')   
        string(name: 'EndPointBD', defaultValue: 'EndPointBDRDS', description: 'Escribir el EndPoint de la BD de la RDS, puede ser la de lectura')     
        // string(name: 'ArnSecretManager', defaultValue: 'arn:aws:secretsmanager:us-east-1:783047516325:secret:/stg/authenticationSrv/database/credentials-sRtJAa', description: 'ARN del Secret Manager a conectarse a la BD')        
        string(name: 'SecurityGroupIdsS', defaultValue: 'Para SAF STG sg-00f4da34863909a0f | Para SAF PRD sg-00c35dd5fb65bb3f8', description: 'Grupo de Seguridad de la BD')
        string(name: 'SubnetIdsS', defaultValue: 'Para SAF STG subnet-07b84505b2c77de52 | Para SAF PRD subnet-051a1bacae43e5f77', description: 'Subnets Back-Pri donde esta la RDS')
        string(name: 'LambdaRotate', defaultValue: 'Para SAF STG arn:aws:lambda:us-east-1:783047516325:function:stg-GeneralPurpose-RotateCredentialsForMYSQL | Para SAF PRD arn:aws:lambda:us-east-1:268219024791:function:prd-GeneralPurpose-RotateCredentialsForMYSQL ', description: 'ARN que manda Rotacion del secreto - LineaBase')
        string(name: 's3snapmontrdsLcstdtogla', defaultValue: '180', description: 'nro. dias lifecycle standard a glacier snapshot mensual RDS')
        string(name: 's3snapmontrdsLcsdel', defaultValue: '540', description: 'nro. dias lifecycle eliminar snapshot mensual RDS')
        string(name: 's3snapannrdsLcstdtogla', defaultValue: '1080', description: 'nro. dias lifecycle standard a glacier snapshot anual RDS')
        string(name: 's3snapannrdsLcdel', defaultValue: '3650', description: 'nro. dias lifecycle eliminar snapshot anual RDS')
        string(name: 'KmsKeyIdexportrdstos3', defaultValue: 'modificar', description: 'ARN KMS customer key gp-oper-product-key')
        choice(name: 'Deploy_ExecuteCopyAmiToAnotherRegion', choices: ['si', 'no'], description: "XXXX Solo ejecutar si se va a copiar AMI - Consultar a JGC")
        string(name: 'ImageId', defaultValue: 'modificar', description: 'ID AMI a copiar')
        choice(name: 'Deploy_ValidationBatch', choices: ['si', 'no'], description: "Solo ejecutar en ambiente SAF STG y PRD debido a que es una sarta customizada para este cliente - Consultar a JGC")
        choice(name: 'DeployCreateACM', choices: ['false', 'true'], description: "Ejecutar creación de ACM en la primera fase de aprovisionamiento de ambientes - Consultar a JGC")
        choice(name: 'DeployChangeProcessDate', choices: ['false', 'true'], description: "Step para ejecución de cambio de fecha de proceso - Consultar a JGC")
        choice(name: 'DeployACMExpiration', choices: ['false', 'true'], description: "Alert configuration for ACM expired - Consultar a JGC")
        string(name: 'DomainNameParameter', defaultValue: 'Ingresar certificado tipo Wildcard Ejemplo: *.dev4.product.cobiscloud.com')        
        string(name: 'HostedZone', defaultValue: 'Z011495137TDT8DA9NMY9')
        string(name: 'RoleArn', defaultValue: 'arn:aws:iam::125277160564:role/GP-Oper-Global-Resources-IamRole-1TCWJF0JPPNJW')
        string(name: 'S3BucketNameParameter', defaultValue: 'gp-oper-acm')
        string(name: 'SubjectAlternativeName', defaultValue: 'XXXXXX')
        choice(name: 'DeployAwsConfig', choices: ['true', 'false'], description: "Deploy Aws Config")                
        choice(name: 'DeployIAMAccessAnalyzer', choices: ['true', 'false'], description: "Deploy IAM Access Analyzer")
        choice(name: 'DeployVPCFlowLogs', choices: ['true', 'false'], description: "Deploy VPC Flow Logs")

        // string(name: 'SourceRegion', defaultValue: 'modificar', description: 'Región origen AMI')
        // string(name: 'DestinationRegion', defaultValue: 'modificar', description: 'Región destino AMI')


        // string(name: 'REGION_PRD', defaultValue: 'us-east-1', description: 'Region to deploy in prodcution')
        // string(name: 'ACCOUNT_ECR_ID_PRD', defaultValue: '157784360931', description: 'ECR Account id Pro')
        // string(name: 'S3_BUCKET_PRD', defaultValue: 'prd-cobis-operations-serverless-base-157784360931', description: 'S3 save funtions and swagger')
        // string(name: 'EnvironmentId_PRD', defaultValue: 'prd', description: 'EnvironmentId for production')                
        // string(name: 'Lambda_Subnets_PRD', defaultValue: 'subnet-045bd662e24bc700c,subnet-077d056db83239436', description: 'Subnets for the lambdas in production sepparated by comma ex: subnet-0423a5204b258349f,subnet-048fda72960e2d342')
        // string(name: 'Lambda_SecurityGroups_PRD', defaultValue: 'sg-09344cfaf17d0e6dd', description: 'SecurityGroups for the lambdas in production sepparated by comma ex: sg-0c1e32db86ecb9153,sg-0c1e32db86ecb7657')
        // string(name: 'WEBHOOK_OperationsCosts_PRD', defaultValue: 'https://cobiscorp.webhook.office.com/webhookb2/77f2aeb7-4b3e-472e-b596-2e7f7718424d@a5e6fcaa-5535-41e3-8d08-2b6676750a3f/IncomingWebhook/2d8eb983e45a453eb9dd9a54ee6b3f53/408042f4-b243-41c2-be45-492a2b358fa0', description: 'OperationsCosts Webhook URL in Production Environment')
        // string(name: 'WEBHOOK_CostsServerless_PRD', defaultValue: 'https://outlook.office.com/webhook/7cd698b3-4ad3-430c-bb68-7982188a2e14@a5e6fcaa-5535-41e3-8d08-2b6676750a3f/IncomingWebhook/94ff002998e24afdb4bf6bdcd81ec790/408042f4-b243-41c2-be45-492a2b358fa0', description: 'CostsServerless Webhook URL in Production Environment')
        // string(name: 'AdminRole_PRD', defaultValue: 'arn:aws:iam::157784360931:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_AdministratorAccess_e7c02a6a0be62193', description: 'ARN of the Admin Role of the Production account')        
        // string(name: 'Aditional_Params_PRD', defaultValue: 'Organization="Cobiscorp" Package="Cobis Core Banking" Version="1.0.0" EnvironmentType="Production" TenantId="t1" Project="Core Serverless" ProcessingType="Operations"', description: 'Aditional parameters to override in staging (use same format as toml file)')        
    }


    stages {      

        stage('Build') {    
            when {
                expression { params.REQUESTED_ACTION == 'CreateOrUpdate' }
            }
            steps {
                script {
					ecrLoginCobisSharedServices()
					withDockerContainer('125277160564.dkr.ecr.us-east-1.amazonaws.com/cobis/cobis-devops-sam-cli-aws-java:latest') {
						sh("cd $WORKSPACE/")    
						sh("aws --version")    
						sh("sam --version")    
						sh("pip3 --version")
						sh("/usr/bin/python3 --version")               
						sh '''        
							find . -name "Requeriments.txt" -exec sh -c '
							for file do
							dir=${file%/*}
							echo "******************************"
							echo "Provisioning $dir"
							echo "******************************"
							pip3 install --requirement "$file" -t "$dir" --system
							done' sh {} +
						'''
					}
                }
            }
        }

        stage('Deploy Staging') {             
            when {
				expression { params.REQUESTED_ACTION == 'CreateOrUpdate' }
            }
            steps {
                script {
					ecrLoginCobisSharedServices()
					withDockerContainer('125277160564.dkr.ecr.us-east-1.amazonaws.com/cobis/cobis-devops-sam-cli-aws-java:latest') {
						echo "CONFIG AWS USER"
						sts_token_response = get_sts_assume_role(params, "${AWS_ACCOUNT_ID}")
						set_variables_from_sts_response(sts_token_response)
                        env.AWS_DEFAULT_REGION = "${params.REGION_STG}"
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                        env.AWS_SESSION_TOKEN = "${AWS_SESSION_TOKEN}"                        
						sh """
                            echo 'Deploying SAM template'  
                            sam package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket ${params.S3_BUCKET_STG} --region ${params.REGION_STG}  --s3-prefix ${params.AWS_ACCOUNT_ID}/deploy-operations                          					                           																											                            
                            sam deploy --template-file packaged.yaml --stack-name ${params.STACK_NAME} --region=${params.REGION_STG} --s3-bucket ${params.S3_BUCKET_STG} --no-confirm-changeset true --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM CAPABILITY_NAMED_IAM --parameter-overrides EnvironmentId="${params.EnvironmentId_STG}" RegionId="${params.REGION_STG}" Account="${params.AWS_ACCOUNT_ID}" AWSAccountsEnv="${params.EnvironmentId_STG}" configobjectcontrol="${params.configobjectcontrol}" AdminRoleArn="${params.AdminRole_STG}" OrganizationAbbreviatedoo="${params.OrganizationAbbreviatedoo}" Organizationoo="${params.Organizationoo}" DeploySecutiryHubConfig="${params.Deploy_SecutiryHubConfig}" DeployDetective="${params.Deploy_Detective}" DeployBackups="${params.Deploy_Backups}" DeployLambdaConcurrencyConfig="${params.Deploy_LambdaConcurrencyConfig}" LambdasConfigDefinition="${params.LambdasConfigDefinition}" LambdaProvisionCron="${params.LambdaProvisionCron}" LambdaVerificaCron="${params.LambdaVerificaCron}" LambdaEliminaCron="${params.LambdaEliminaCron}" DeployCostReport="${params.Deploy_CostReport}" DeployExportsnapshotrdstos3="${params.Deploy_Exportsnapshotrdstos3}" scheduleexportsnapshotrdstos3="${params.scheduleexportsnapshotrdstos3}" RDSClusterId="${params.RDSClusterId}" EndPointBD="${params.EndPointBD}" SecurityGroupIdsS="${params.SecurityGroupIdsS}" SubnetIdsS="${params.SubnetIdsS}" LambdaRotate="${params.LambdaRotate}" EnvironmentIdNew="${params.EnvironmentIdNew}" KmsKeyIdexportrdstos3="${params.KmsKeyIdexportrdstos3}" s3snapmontrdsLcstdtogla="${params.s3snapmontrdsLcstdtogla}" s3snapmontrdsLcsdel="${params.s3snapmontrdsLcsdel}" s3snapannrdsLcstdtogla="${params.s3snapannrdsLcstdtogla}" s3snapannrdsLcdel="${params.s3snapannrdsLcdel}" ExecuteCopyAmiToAnotherRegion="${params.Deploy_ExecuteCopyAmiToAnotherRegion}" DeployValidationBatch="${params.Deploy_ValidationBatch}" DeployChangeProcessDate="${params.DeployChangeProcessDate}" DeployACMExpiration="${params.DeployACMExpiration}"  DeployCreateACM="${params.DeployCreateACM}" DomainNameParameter="${params.DomainNameParameter}" Regions="${params.Regions}" HostedZone="${params.HostedZone}" RoleArn="${params.RoleArn}" S3BucketNameParameter="${params.S3BucketNameParameter}" SubjectAlternativeName="${params.SubjectAlternativeName}" ImageId="${params.ImageId}" DeployAwsConfig="${params.DeployAwsConfig}" DeployIAMAccessAnalyzer="${params.DeployIAMAccessAnalyzer}" DeployVPCFlowLogs="${params.DeployVPCFlowLogs}"  ${params.Aditional_Params_STG} 
						"""
                        sh("echo [INI] execute_remediations")
                        execute_remediations(params.EnvironmentId_STG, params.REGION_STG)
                        sh("echo [END] execute_remediations")
					}
                }
            }
        }    

        // stage('Integration Test'){
        //     when {
        //         expression { params.REQUESTED_ACTION == 'CreateOrUpdate'}
        //     }
        //     steps {
        //         echo "Integration Test"
        //     }
        // }

        // stage('Acceptance deploy on Prod') {   
        //     when {
        //         expression { params.REQUESTED_ACTION == 'CreateOrUpdate' }
        //     }       
        //     steps {
        //         input (message: 'Are you agreee with the acceptance criteria?', ok: 'Agree!')
        //     }
        // } 

        // stage('Deploy Production') {           
        //     when {
        //         expression { params.REQUESTED_ACTION == 'CreateOrUpdatedeshabilitadoprdxxx' }
        //     }
        //     steps {                
        //         input (message: 'Se deja sólo el despliegue de ambientes uno a la vez')
        //         // script {
		// 		// 	ecrLoginCobisSharedServices()
		// 		// 	withDockerContainer('125277160564.dkr.ecr.us-east-1.amazonaws.com/cobis/cobis-devops-sam-cli-aws-java:latest') {
		// 		// 		echo "CONFIG AWS PRD USER"
		// 		// 		sts_token_response = get_sts_assume_role(params, "${ACCOUNT_ECR_ID_PRD}")
		// 		// 		set_variables_from_sts_response(sts_token_response)
        //         //         env.AWS_DEFAULT_REGION = "${params.REGION_PRD}"
        //         //         env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
        //         //         env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
        //         //         env.AWS_SESSION_TOKEN = "${AWS_SESSION_TOKEN}"
		// 		// 		sh """
		// 		// 			sam deploy --stack-name ${params.STACK_NAME} --region=${params.REGION_PRD} --s3-bucket ${params.S3_BUCKET_PRD} --no-confirm-changeset true --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM CAPABILITY_NAMED_IAM --parameter-overrides AWSAccountsEnv="${params.EnvironmentId_PRD}" configobjectcontrol="${params.configobjectcontrol}" AdminRoleArn="${params.AdminRole_PRD}" OperationsCosts="${params.WEBHOOK_OperationsCosts_PRD}" CostsServerlessChannels="${params.WEBHOOK_CostsServerless_PRD}" ${params.Aditional_Params_PRD} 
		// 		// 		"""
        //         //         sh("echo [INI] execute_remediations")
        //         //         execute_remediations(params.EnvironmentId_PRD, params.REGION_PRD)
        //         //         sh("echo [END] execute_remediations")
		// 		// 	}
        //         // }
        //     }
        // }   
    }
}

def execute_remediations(aws_environment, aws_region){
    sh("bash devops/execute_remediations.sh ${aws_environment} ${aws_region}")
}

def get_user_id_and_group_id() {
    jenkinsUserId = sh(script: 'id -u', returnStdout:true).trim()
    jenkinsGroupId = sh(script: 'id -g', returnStdout:true).trim()
    return "${jenkinsUserId}:${jenkinsGroupId}"
}

def set_variables_from_sts_response(response) {
    def jsonSlurper = new JsonSlurper()
    def response_sts = jsonSlurper.parseText(response)
    AWS_SESSION_TOKEN="${response_sts.Credentials.SessionToken}"
    AWS_ACCESS_KEY_ID="${response_sts.Credentials.AccessKeyId}"
    AWS_SECRET_ACCESS_KEY="${response_sts.Credentials.SecretAccessKey}"
}

def get_sts_assume_role(def params, def aws_account) {
    command_sts="aws sts assume-role --role-arn arn:aws:iam::${aws_account}:role/ec2_dev_role --role-session-name ec2_dev_role_from_jenkins"
    result_command_sts = sh(script: command_sts, returnStdout:true).trim()
    return result_command_sts
}

def aws_cre(def aws_account){
    sts_token_response = get_sts_assume_role(params, aws_account)
    set_variables_from_sts_response(sts_token_response)
}